// parse form data (necessary for x-www-form-urlencoded)
err := r.ParseForm()
if err != nil {
http.Error(w, "Error parsing form", http.StatusBadRequest)
return
}

fmt.Println("Form:", r.Form)

// prepare response data
response := make(map[string]interface{})
for key, value := range r.Form {
response[key] = value[0]
}

fmt.Println("Processed Reponse map", response)

// RAW body
body, err := io.ReadAll(r.Body)
if err != nil {
return
}

defer r.Body.Close()

fmt.Println("RAW body:", body)
fmt.Println("RAW body:", string(body))

// if you expect json data, then unmarshal it
var userInstance user
err = json.Unmarshal(body, &userInstance)
if err != nil {
return
}

fmt.Println(userInstance)
fmt.Println("Recieved user name as:", userInstance.Name)

// access the request details
fmt.Println("Body:", r.Body)
fmt.Println("Form:", r.Form)
fmt.Println("Header:", r.Header)
fmt.Println("Context:", r.Context())
fmt.Println("ContentLength:", r.ContentLength)
fmt.Println("Host:", r.Host)
fmt.Println("Method:", r.Method)
fmt.Println("Protocol:", r.Proto)
fmt.Println("Remote Address:", r.RemoteAddr)
fmt.Println("Request URI:", r.RequestURI)
fmt.Println("TLS:", r.TLS)
fmt.Println("Trailer:", r.Trailer)
fmt.Println("Transfer Encoding:", r.TransferEncoding)
fmt.Println("URL:", r.URL)
fmt.Println("User Agent:", r.UserAgent())
fmt.Println("Port:", r.URL.Port())